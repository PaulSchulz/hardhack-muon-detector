# Hardhack: Cosmic Ray Muon Detector
substitutions:
  name: muon-detector
  friendly_name: "Hardhack Muon Detector"
  project_name: "hardhack.muon-detector"
  project_version: "2.0"
  led_strip_num: "2"

##############################################################################
esphome:
  name: "esp32s3-muon-detector-v2"

esp32:
#  board: heltec_wifi_kit_32_V3
 # variant: esp32s3
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
#    version: 2.0.9
#    platform_version: 6.3.0

##############################################################################
#external_components:
#  - source:
#    path: "../esphome"
#############################################################################

# Enable logging
logger:
  hardware_uart: "UART0"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  platform: esphome
  password: !secret ota_password

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

captive_portal:
web_server:
  local: true

i2c:
  - id: bus_a
    sda: 17
    scl: 18
    frequency: 400kHz
    # frequency: 800kHz
#  - id: bus_b
#    sda: 41
#    scl: 42

globals:
  - id: muon_cnt
    type: int
    initial_value: "0"
    restore_value: true
  - id: background_cnt
    type: int
    initial_value: "0"
    restore_value: true

font:
# gfonts://family[@weight]
#  - file: "gfonts://Roboto+Mono"
  - file: "gfonts://Nova+Mono"
    id: roboto_16
    size: 16
  - file: "gfonts://Roboto"
    id: roboto_10
    size: 10

display:
  - id: muon_display
    platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: 21
    i2c_id: bus_a
    address: 0x3C
    update_interval: 2s
    # auto_clear_enabled: false
    lambda: |-
      it.print( 0,  2, id(roboto_10), "Muons");
      it.print(82,  2, id(roboto_10), "Events/m");
      it.printf(0, 10, id(roboto_16), "%08d %5.1f", id(muon_cnt), id(muon_event_rate).state);
      
      it.print(0, 32, id(roboto_10), "Background");
      it.printf(0, 40, id(roboto_16), "%08d %5.1f", id(background_cnt), id(background_event_rate).state);

light:
  - platform: esp32_rmt_led_strip
    rgb_order: RGB
    pin: GPIO7
    num_leds: ${led_strip_num}
    # num_leds: 8
    rmt_channel: 0
    chipset: WS2812
    name: "Light"
    id: led_strip
    # default_transition_length: 0s
    # restore_mode: ALWAYS_ON
    # on_turn_on:
    #  - light.turn_on:
    # id: led_strip
    #       effect: "Shower"
    # effects:
    #  - addressable_scan:
    #   - addressable_lambda:
    #       name: "Off"
    #       lambda: |-
    #        it.all().fade_to_black(10);
    #  - addressable_lambda:
    #      name: "Shower"
    #       update_interval: 16ms
    #       lambda: |-
    #         // it.size() - Number of LEDs
    #        // it[num] - Access the LED at index num.
    #         // Set the LED at num to the given r, g, b values
    #         // it[num] = Color(r, g, b);
    #         // Get the color at index num (Color instance)
    #         // it[num].get();

    #        // To reset static when stopping and starting the effect
    #        // again you can use the initial_run variables
    #        if (initial_run) {
    #          // progress = 0;
    #          it.all() = Color::BLACK;
    #          // it[0] = Color::random_color();
    #        }

    #        // Example: Simple color wipe
    #        for (int i = it.size() - 1; i > 0; i--) {
    #          it[i] = it[i - 1].get();
    #          it[i-1] = Color(0,0,0);
    #        }
    #
    #        // Bonus: use .range() and .all() to set many LEDs without having to write a loop.
    #        // it.range(0, 50) = Color::BLACK;
    #        // it.all().fade_to_black(10);

script:
  - id: trigger_muon
    then:
      - lambda: |-
          id(muon_cnt) += 1;
          if (id(muon_cnt) > 99999999) id(muon_cnt) = 0;
          
      - light.addressable_set:
          id: led_strip
          range_from: 0
          range_to: 1
          red: 100%
          green: 100%
          blue: 100%

      - delay: 100ms

      - light.addressable_set:
          id: led_strip
          range_from: 0
          range_to: 1
          red: 0%
          green: 0%
          blue: 0%

      #- component.update: muon_display

  - id: trigger_background
    then:
      - lambda: |-
          id(background_cnt) += 1;
          if (id(background_cnt) > 99999999) id(background_cnt) = 0;
      #- component.update: muon_display

sensor:
  - platform: template
    name: "Muon Counter"
    id: muon_counter
    # update_interval: never
    update_interval: 1s
    accuracy_decimals: 0
    state_class: total_increasing
    lambda: return id(muon_cnt);

  - name: "Muon Event Rate"
    # platform: pulse_counter
    platform: pulse_meter
    id: muon_event_rate
    pin: 
      number: GPIO1
      mode: input
    on_value:
      - script.execute:
          id: trigger_muon
    #total:
    #  name: Total Muons
    #filters:
    #  exponential_moving_average:

  - platform: template
    name: "Background Counter"
    id: background_counter
    # update_interval: never
    update_interval: 1s
    accuracy_decimals: 0
    state_class: total_increasing
    lambda: return id(background_cnt);

  - name: "Background Event Rate"
    # platform: pulse_counter
    platform: pulse_meter
    id: background_event_rate
    pin: 
      number: GPIO2
      mode: input
    on_value:
      - script.execute:
          id: trigger_background
    #filters:
    #  exponential_moving_average:
    #total:
    #  name: Total Background

binary_sensor:
  - platform: gpio
    pin: GPIO0
    name: "Button"
    on_press:
      then:
        - lambda: |-
            id(muon_cnt) = 0;
            id(background_cnt) = 0;
