substitutions:
  udp_target: "10.1.1.255"
  udp_port: "5000"
  udp_message: "Ping"

esphome:
  name: esp32s3-muon-detector

esp32:
  #  board: heltec_wifi_lora_32_V3
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  #logs:
  # sensor: none
  # binary_sensor: none
  # wifi: none

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:
web_server:

script:
- id: send_udp
  parameters:
    msg: string
    host: string
    port: int
  then:
    - lambda: |-
            int sock = ::socket(AF_INET, SOCK_DGRAM, 0);
            struct sockaddr_in destination, source;

            destination.sin_family = AF_INET;
            destination.sin_port = htons(port);
            destination.sin_addr.s_addr = inet_addr(host.c_str());

            int n_bytes = ::sendto(sock, msg.c_str(), msg.length(), 0, reinterpret_cast<sockaddr*>(&destination), sizeof(destination));
            ESP_LOGD("send", "Sent %s to %s:%d in %d bytes", msg.c_str(), host.c_str(), port, n_bytes);
            ::close(sock);

globals:
  - id: muon_counter_int
    type: int
    restore_value: true
    initial_value: '0'

sensor:
  - platform: template
    name: "Muon Counter"
    id: muon_counter
    update_interval: never
    accuracy_decimals: 0
    state_class: total_increasing
    lambda: return id(muon_counter_int);

binary_sensor:
  - platform: gpio
    pin: GPIO1
    name: "Muon Event"
    on_press:
      - lambda: |-
          // Add one to the global integer
          id(muon_counter_int) += 1;
          // Force the sensor to publish a new state
          id(muon_counter).publish_state(id(muon_counter_int));
      - script.execute:
          id: send_udp
          msg: $udp_message
          host: $udp_target
          port: $udp_port

button:
  - platform: template
    id: button_test
    name: "Event Test"
    on_press:
      - lambda: |-
          // Add one to the global integer
          id(muon_counter_int) += 1;
          // Force the sensor to publish a new state
          id(muon_counter).publish_state(id(muon_counter_int));
      - script.execute:
          id: send_udp
          msg: $udp_message
          host: $udp_target
          port: $udp_port
          
  - platform: template
    id: button_udp_sender
    name: "Send UDP Test"
    on_press:
      - script.execute:
          id: send_udp
          msg: $udp_message
          host: $udp_target
          port: $udp_port

